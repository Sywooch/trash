<?php/** * Класс для генерации xml с данными о компании DocDoc * * @author Danis */class Feeder{	public $params = array();	public $features = array();	public $services = array();	/*	 *  @param array $params	 */	public function __construct($params = array())	{		$this->params = $params;	}	/*	 *  Получение дерева XML	 *  @param array $features	 *  @return string	 */	public function buildXML($features = array())	{		if (count($features) > 0) {			$this->features = $features;		}		$xml = '<companies version="1.0"                xmlns:xi="http://www.w3.org/2001/XInclude"                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"                xsi:noNamespaceSchemaLocation="companies.xsd">';		$this->output($xml, true);		$this->addCompanies();		$this->output('</companies>');		return true;	}	/*	 * Генерация список компаний	 * @param boolean $isClinic	 */	protected function addCompanies($isClinic = true)	{		if (!$isClinic) {			$params['isDiagnostic'] = 'yes';		}		$params['open_4_yandex'] = 'yes';		$params['withDoctors'] = true;		$params['isClinic'] = 'yes';		$items = Clinic::getItems($params);		foreach ($items as $item) {			$xml = $this->getCompany($item);			$this->output($xml);			unset($xml);		}	}	/*	 *  Генерация данных о компании	 *  @param array $data	 */	protected function getCompany($data)	{		$xmlString = "\n";		$xmlString .= '<company id="' . $data['Id'] . '">';		if ($data['ScheduleState'] == 'enable') {			$mode = 'dynamic';		} else {			$mode = 'static';		}		$xmlString .= '<book-mode>' . $mode . '</book-mode>';		$xmlString .= '<name lang="ru">' . $data['Name'] . '</name>';		$xmlString .=			'<address lang="ru">' . $data['City'] . ', ' . $data['Street'] . ', ' . $data['House'] . '</address>';		$xmlString .= '<country lang="ru">Россия</country>';		$xmlString .= '<admn-area lang="ru">' . $data['City'] . '</admn-area>';		$xmlString .= '<locality-name lang="ru">город ' . $data['City'] . '</locality-name>';		$xmlString .= '<street lang="ru">' . $data['Street'] . '</street>';		// House		$house = trim($data['House']);		$pattern = "~^д. ([0-9]+)([а-яА-Я0-9/]+)?(, корп. ([а-яА-Я0-9]+))?(, стр. ([а-яА-Я0-9]+))?$~";		$houseParams = array(0, 'house', 'house-add', 0, 'corps', 0, 'build');		$params = array();		if (preg_match($pattern, $house, $matches)) {			foreach ($matches as $index => $value) {				if (isset($houseParams[$index])) {					if (!empty($value) && $houseParams[$index] != '0') {						$xmlString .= "<" . $houseParams[$index] . ">" . $value . "</" . $houseParams[$index] . ">";						$params[$houseParams[$index]] = $value;					}				}			}		}		if (!empty($data['Longitude']) && $data['Latitude']) {			$xmlString .= '<coordinates>                                <lon>' . $data['Longitude'] . '</lon>                                <lat>' . $data['Latitude'] . '</lat>                             </coordinates>';		}		$phones = explode(';', $data['PhoneAppointment']);		foreach ($phones as $phone) {			$xmlString .= '<phone>                                <ext/>                                <type>phone</type>                                <number>' . $phone . '</number>                                <info/>                             </phone>';		}		if (!empty($data['email'])) {			$xmlString .= '<email>' . $data['Email'] . '</email>';		}		if ($data['URL']) {			$xmlString .= '<url>' . $this->formatClinicUrl($data['URL']) . '</url>';		}		if (!empty($data['WeekdaysOpen'])) {			if ($data['WeekdaysOpen'] == $data['WeekendOpen']) {				$workTime = 'ежедн. ' . $data['WeekdaysOpen'];			} else {				$workTime = 'буд. ' . $data['WeekdaysOpen'] . ', вых. ' . $data['WeekendOpen'];			}		} else {			$workTime = 'ежедн. 10:00-22:00';		}		$xmlString .= '<working-time lang="ru">' . $workTime . '</working-time>';		$xmlString .= '<rubric-id>184106104</rubric-id>';		$xmlString .= '<actualization-date>' . (time() * 1000) . '</actualization-date>';		if (!empty($data['ShortDescription'])) {			$xmlString .= '<description>' . $data['ShortDescription'] . '</description>';		}		if (!empty($data['logoPath']) && isset($url)) {			$xmlString .= '<photos gallery-url="' . $url . '">';			$xmlString .= '<photo url="' . $data['Logo'] . '" type="logo"></photo>';			$xmlString .= '</photos>';		}		$xmlString .= $this->getServices($data);		$xmlString .= $this->getResources($data['Id']);		//        $this->addFeatures();		$xmlString .= "</company>\n";		return $xmlString;	}	/*	 *  Генерация списка услуг	 *  @param array $clinic	 */	protected function getServices($clinic)	{		$xmlString = '';		//$firstSpec = array('Id' => '1', 'Name' => 'Первичный приём');		//$this->services = array_merge($firstSpec, $this->getSpecsById($clinic['Id']));		echo "Start load services for clinic " . $clinic['Id'] . "\r\n";		echo "Services: ";		$this->services = Clinic::getSpecListById($clinic['Id']);		$xmlString .= '<services>';		$xmlString .= '<service id="1">';		$xmlString .= '<title>Первичный приём</title>';		$xmlString .= '<description>Первичный приём</description>';		$xmlString .= '<rubric-id>184106104</rubric-id>';		$xmlString .= $this->getSchedules($clinic['Id'], 1);		$xmlString .= '</service>';		echo "1 ";		foreach ($this->services as $item) {			$xmlString .= '<service id="' . $item['Id'] . '">';			$xmlString .= '<title>' . $item['Name'] . '</title>';			$xmlString .= '<description>' . $item['Name'] . '</description>';			$xmlString .= '<rubric-id>184106104</rubric-id>';			$xmlString .= $this->getSchedules($clinic['Id'], $item['Id']);			$xmlString .= '</service>';			echo $item['Id'] . " ";		}		echo "\r\n";		/*		if($clinic['IsDiagnostic'] == 'yes'){			$xmlString .= '<service id="2">';			$xmlString .= '<title>МРТ</title>';			$xmlString .= '<description>МРТ</description>';			$xmlString .= '<rubric-id>184106104</rubric-id>';			$xmlString .= '</service>';		}		 * */		$xmlString .= '</services>';		echo "End load services for clinic " . $clinic['Id'] . "\r\n\r\n";		return $xmlString;	}	/*	 *  Генерация списка врачей	 *  @param integer $clinicId	 */	protected function getResources($clinicId)	{		$xmlString = '';		$xmlString .= '<resources>';		$params['city'] = 1;		$params['clinicId'] = $clinicId;		$params['detailed'] = false;		$data = Doctor::getItems($params);		$i = 0;		foreach ($data as $item) {			$xmlString .= '<resource id="' . $item['Id'] . '">';			$xmlString .= '<name>' . $item['Name'] . '</name>';			$xmlString .= '<description>' . $this->getDoctorDescription($item) . '</description>';			$xmlString .= '<photo>http://' . SERVER_FRONT . '/img/doctors/1x1/' . $item['SqImg'] . '</photo>';			$xmlString .= $this->getReviews($item['Id'], $item['Alias']);			$xmlString .= '</resource>';			$i++;		}		$xmlString .= '</resources>';		return $xmlString;	}	/*	 * Описание врача	 */	protected function getDoctorDescription($doctor)	{		$desc = "";		$items = Doctor::getSpecialityListById($doctor['Id']);		$specs = array();		foreach ($items as $item) {			$specs[] = $item['Name'];		}		$specs = implode('. ', $specs);		$desc .= !empty($specs) ? $specs . ". " : "";		$degree = Doctor::getDegreeById($doctor['Id']);		$desc .= $degree;		$exp = Doctor::getExperience($doctor['ExperienceYear']);		$desc .= ($exp != 'нет') ? "Стаж $exp. " : "";		$desc .= !empty($doctor['TextAssociation']) ? strip_tags($doctor['TextAssociation']) . " " : "";		if (strlen($desc) < 250) {			$desc .= !empty($doctor['Description']) ? strip_tags($doctor['Description']) : "";		}		return $desc;	}	/*	 *  Генерация специальных свойств - специальности...	 */	protected function addFeatures()	{		$xmlString = '';		$xmlString .= '<feature>';		$xmlString .= '<known-features>';		foreach ($this->features as $item) {			$method = 'get' . ucfirst($item);			if (method_exists($this, $method)) {				$xmlString .= call_user_func(array('self', $method), $this->params);			} else {				exit("Error: no such feature - $item!");			}		}		$xmlString .= '</known-features>';		$xmlString .= '</feature>';		$this->xml .= $xmlString;	}	/*	 *  Получение списка специальностей	 *  @return string	 */	protected function getSpecs()	{		$xmlString = '';		$xmlString .= '<known-enum-multiple name="speciality"/>';		$data = Doctor::getSpecialities();		foreach ($data as $item) {			//            $xmlString .= '<feature-enum-multiple name="speciality" value="' . $item['Alias'] . '"/>';			$xmlString .= '<enum-value name="speciality">' . $item['Alias'] . '</enum-value>';		}		return $xmlString;	}	/*	 * Получение отзывов на врача	 * @param integer $doctorId	 * @return string	 */	protected function getReviews($doctorId, $doctorAlias)	{		$xmlString = '';		$reviews = Doctor::getReviewsById($doctorId);		//var_dump($doctor);		if (count($reviews) > 0) {			$xmlString .= '<reviews>';			foreach ($reviews as $review) {				$rating =					round(						($review['rating_attention'] + $review['rating_qualification'] + $review['rating_room']) / 3,						1					);				$xmlString .= '<review>';				$xmlString .= '<locale>ru</locale>';				$xmlString .= '<type>biz</type>';				$xmlString .= '<url>http://docdoc.ru/doctor/' . $doctorAlias . '?review=' . $review['id'] . '</url>';				$xmlString .= '<description><![CDATA[' . $review['text'] . ']]></description>';				$xmlString .= '<rating>' . $rating . '</rating>';				$xmlString .= '<reviewer><vcard><fn>' . $review['name'] . '</fn></vcard></reviewer>';				$xmlString .=					'<dtreviewed>' .					date('Y-m-d', strtotime($review['created'])) .					'T' .					date('H:i:s', strtotime($review['created'])) .					'</dtreviewed>';				$xmlString .= '</review>';			}			$xmlString .= '</reviews>';		}		return $xmlString;	}	/*	 *  Получение расписания врачей на заданное кол-во дней	 *  @param integer $clinicId	 *  @param array $doctorIds	 *  @param integer $countDays	 *  @return string	 */	protected function getSchedules($clinicId, $serviceId, $countDays = 7)	{		$xmlString = '';		$xmlString .= '<schedules>';		$params['city'] = 1;		$params['clinicId'] = $clinicId;		$params['detailed'] = false;		if ($serviceId <> 1) {			$params['speciality'] = $serviceId;		}		$docs = Doctor::getItems($params);		$sched = new Schedule();		$startDate = date('Y-m-d');		$endDate = date('Y-m-d', mktime(0, 0, 0, date('m'), date('d') + $countDays));		$sheduleFlag = 0;		foreach ($docs as $doc) {			$data = array();			$price = !empty($doc['SpecialPrice']) ? $doc['SpecialPrice'] : $doc['Price'];			$sched->setDoctor($doc['Id']);			$sched->setClinic($clinicId);			for ($i = 0; $i < $countDays; $i++) {				$curTime = mktime(0, 0, 0, date('m'), date('d') + $i);				$weekDay = date('w', $curTime) == 0 ? 7 : date('w', $curTime);				$times = normalizeInterval($sched->getSchedulePool(date('d.m.Y', $curTime)), $sched->getStep());				if (count($times) > 0) {					$data[$weekDay] = $times;				}			}			if (count($data) > 0) {				$sheduleFlag = 1;				$times = $this->groupTimesByWeekDay($data);				$xmlString .=					'<schedule res-id="' . $doc['Id'] . '" date-from="' . $startDate . '" date-to="' . $endDate . '">';				foreach ($times as $key => $day) {					$xmlString .= '<days-of-week mask="' . $key . '">';					foreach ($day as $time) {						$time = explode('-', $time);						$xmlString .= '<time-frame from="' . $time[0] . '" to="' . $time[1] . '">';						$xmlString .= '<price currency="RUB" value="' . $price . '"/>';						$xmlString .= '</time-frame>';					}					$xmlString .= '</days-of-week>';				}				$xmlString .= '</schedule>';			} else {				$xmlString .= '<schedule res-id="' . $doc['Id'] . '" />';			}		}		$xmlString .= '</schedules>';		//        if(!$sheduleFlag)		//            $xmlString = '';		return $xmlString;	}	protected function groupTimesByWeekDay($data)	{		$startTimes = array();		foreach ($data as $weekday => $times) {			foreach ($times as $time) {				$startTimes[$time[0] . '-' . $time[1]][] = $weekday;			}		}		foreach ($startTimes as $key => $time) {			sort($time);			$startTimes[$key] = implode('', $time);		}		$result = array();		foreach ($startTimes as $day) {			$result[$day] = array_keys($startTimes, $day);		}		return $result;	}	protected function output($xml, $clear = false)	{		if ($clear) {			$handle = fopen($this->params['filename'], "w");		} else {			$handle = fopen($this->params['filename'], "a");		}		@flock($handle, LOCK_EX);		fwrite($handle, $xml);		@flock($handle, LOCK_UN);		fclose($handle);		return true;	}	/**	 * Отдаёт страку в правильном формате	 *	 * @param string $url	 *	 * @return string	 */	public function formatClinicUrl($url)	{		return strpos($url, '://') === false			? "http://{$url}"			: $url;	}}